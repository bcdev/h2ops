# ðŸš¨ WARNING: Changes to this file may break deployments. Consult the team before modifying! ðŸš¨

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ${AIRFLOW_DOCKERFILE}
  environment:
    AIRFLOW__CORE__EXECUTOR: ${CORE_EXECUTOR}
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_CONN}
    AIRFLOW__CORE__LOAD_EXAMPLES: ${LOAD_EXAMPLES}
    MLFLOW_TRACKING_URI: ${MLFLOW_SERVER_URI}
    {% if cookiecutter.use_minio == "yes" %}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    MLFLOW_S3_ENDPOINT_URL: http://minio:${MINIO_PORT}
    {% endif %}
    PYTHONPATH: /opt/airflow/{{ cookiecutter.package_name }}:/opt/airflow/dags:${PYTHONPATH}
    PATH: /home/airflow/.local/share/mamba/envs/{{ cookiecutter.folder_name }}/bin:${PATH}
    LD_LIBRARY_PATH: /home/airflow/.local/share/mamba/envs/{{ cookiecutter.folder_name }}/lib:/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}
    AIRFLOW__CORE__DEFAULT_PYTHON_INTERPRETER: /home/airflow/.local/share/mamba/envs/{{ cookiecutter.folder_name }}/bin/python
    PYTHONNOUSERSITE: 1
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./scripts:/opt/airflow/scripts
    - ./data:/opt/airflow/data
    - ./{{ cookiecutter.package_name }}:/opt/airflow/{{ cookiecutter.package_name }}
    {% if cookiecutter.use_minio == "no" %}
    - ./${DEFAULT_ARTIFACT_ROOT}:/${DEFAULT_ARTIFACT_ROOT}
    {% endif %}

  depends_on:
    &airflow-common-depends-on
    postgres-airflow:
      condition: service_healthy

  networks:
    - ml-network

services:

  postgres-mlflow:
    image: ${POSTGRES_IMAGE}
    container_name: postgres-mlflow
    environment:
      POSTGRES_USER: ${POSTGRES_MLFLOW_USER}
      POSTGRES_PASSWORD: ${POSTGRES_MLFLOW_PWD}
      POSTGRES_DB: ${POSTGRES_MLFLOW_DB}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "mlflow" ]
      interval: 5s
      retries: 5
    volumes:
      - postgres-db-volume-mlflow:/var/lib/postgresql/data
    restart: always
    networks:
      - ml-network

  mlflow:
    build: ${MLFLOW_DOCKERFILE}
    container_name: mlflow
    ports:
      - ${MLFLOW_HOST_PORT:-5000}:5000
    depends_on:
      postgres-mlflow:
        condition: service_healthy
    command: mlflow ui -p ${MLFLOW_HOST_PORT} --host 0.0.0.0 
            {% if cookiecutter.use_minio == "yes" %}
            --default-artifact-root s3://${MLFLOW_BUCKET_NAME} --artifacts-destination s3://${MLFLOW_BUCKET_NAME}
            {% endif %}
            --backend-store-uri postgresql://mlflow:mlflow@postgres-mlflow/mlflow --serve-artifacts
    {% if cookiecutter.use_minio == "no" %}
    volumes:
      - ./${DEFAULT_ARTIFACT_ROOT}:/${DEFAULT_ARTIFACT_ROOT}
    {% endif %}
    environment:
      MLFLOW_TRACKING_URI: ${MLFLOW_SERVER_URI}
      {% if cookiecutter.use_minio == "yes" %}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MLFLOW_S3_ENDPOINT_URL: http://minio:${MINIO_PORT}
      {% endif %}

    restart: always
    networks:
      - ml-network

  postgres-airflow:
    image: ${POSTGRES_IMAGE}
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume-airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - ml-network

  airflow-webserver:
    container_name: airflow-webserver
    <<: *airflow-common
    command: webserver
    ports:
      - ${AIRFLOW_WEBSERVER_PORT:-8080}:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    container_name: airflow-scheduler
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    container_name: airflow-init
    <<: *airflow-common
    command: >
      bash -c "
      airflow db init &&
      airflow db migrate &&
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.org
      "
    restart: no

  {% if cookiecutter.use_minio == "yes" %}
  minio:
    restart: always
    image: minio/minio
    container_name: mlflow_s3
    ports:
        - "9000:9000"
        - "9001:9001"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
        - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
        - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
        - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      retries: 5
    networks:
      - ml-network
  {% endif %}

  {% if cookiecutter.use_minio == "yes" %}
  minio_client:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    container_name: minio_client
    env_file:
        - .env
    entrypoint: >
        /bin/sh -c "
        /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
        /usr/bin/mc mb minio/mlflow;
        exit 0;
        "
    networks:
      - ml-network
  {% endif %}

networks:
  ml-network:
    driver: bridge

volumes:
    postgres-db-volume-mlflow:
    postgres-db-volume-airflow:
    minio_data: